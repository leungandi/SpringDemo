<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx" xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
		http://www.springframework.org/schema/context
		http://www.springframework.org/schema/context/spring-context-4.0.xsd
		http://www.springframework.org/schema/tx
		http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
	    http://www.springframework.org/schema/aop 
        http://www.springframework.org/schema/aop/spring-aop-4.0.xsd">
       	<!-- 读取配置文件 -->
        <context:property-placeholder location="database.properties"/>
        
        <!-- 配置数据源 -->
        <bean id="dataSource" class="org.apache.commons.dbcp2.BasicDataSource"  
	    destroy-method="close">  
		    <property name="driverClassName" value="${jdbc.driver}" />  
		    <property name="url" value="${jdbc.url}" />  
		    <property name="username" value="${jdbc.username}" />  
		    <property name="password" value="${jdbc.password}" />  
		</bean>
		
		<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
 	 		<!-- 指定数据源 -->
	 	 	<property name="dataSource" ref="dataSource"></property>
	 	 	<!-- 指定mybatis配置文件 -->
			<property name="configLocation" value="classpath:configuration.xml"/> 
			<property name="mapperLocations" value="classpath*:com/szl/springorm/dao/impl/*.xml"></property>
 	 	</bean>

 	 	<!-- 1.注册MapperFactoryBean -->	
 	 	<bean id="userDao1" class="org.mybatis.spring.mapper.MapperFactoryBean">
 	 		<!-- 注册映射器,也就是DAO接口 -->
 	 		<property name="mapperInterface" value="com.szl.springorm.dao.UserDao1"></property>
 	 		<property name="sqlSessionFactory" ref="sqlSessionFactory" />
 	 	</bean>
		<!-- 2.service中直接注入userDao --> 	 	
 	 	<bean id="userServiceImpl" class="com.szl.springorm.service.impl.UserServiceImpl">
 	 		<property name="userDao1" ref="userDao1"></property>
 	 	</bean> 
 	 	<bean id="userServiceImpl1" class="com.szl.springtransaction.service.impl.UserServiceImpl">
 	 		<property name="userDao1" ref="userDao1"></property>
 	 	</bean> 
 	 	
 	 	<!-- 定义一个某个框架平台的TransactionManager,此处使用JDBC -->
 	 	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">    
		    <property name="dataSource" ref="dataSource"/>  
		</bean> 
		<!-- ****************************编程式事务***************************************** -->
		<!-- 使用TransactionTemplate -->
		<bean id="transactionTemplate" class="org.springframework.transaction.support.TransactionTemplate">
			<!-- 设置transactionManager -->
			<constructor-arg name="transactionManager" ref="transactionManager"></constructor-arg>
		</bean>
		
		
		<!-- ****************************声明式事务***************************************** -->
		
		<tx:advice id="txAdvice" transaction-manager="transactionManager">
			<tx:attributes>
				<tx:method name="update*" propagation="REQUIRED" isolation="DEFAULT"/>
				<tx:method name="*" propagation="REQUIRED" isolation="DEFAULT" read-only="true"/>
			</tx:attributes>
		</tx:advice>
		
		<aop:config proxy-target-class="true">
			<aop:pointcut expression="execution(* com.szl.springorm.service.impl.*.*(..))" id="txPointcut"/>
			<aop:advisor advice-ref="txAdvice" pointcut-ref="txPointcut"/>
		</aop:config>
		
		<!-- ****************************@Transactional实现事务管理***************************************** -->
		<!-- 配置支持声明式事务 -->
		<tx:annotation-driven transaction-manager="transactionManager"/>
        
</beans>